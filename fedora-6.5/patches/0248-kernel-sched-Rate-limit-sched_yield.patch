From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paskal Sitepu <rmnscnce@ya.ru>
Date: Mon, 18 Sep 2023 03:57:24 +0700
Subject: [PATCH 248/384] kernel: sched: Rate limit sched_yield

Taken from [1]

Some misguided apps hammer sched_yield() in a tight loop (they should be using futexes instead)
which causes massive lock contention even if there is little work to do or to yield to.
rare limit yielding since the base scheduler does a pretty good job already about just
running the right things

[1]: https://github.com/clearlinux-pkgs/linux/blob/b9925f121fb99c02bdeff88c5ac7b4bc73cb0d6c/ratelimit-sched-yield.patch

Signed-off-by: Paskal Sitepu <rmnscnce@ya.ru>
---
 kernel/sched/core.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 8e6420198a7e..0eddd40a6405 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -8560,10 +8560,21 @@ SYSCALL_DEFINE3(sched_getaffinity, pid_t, pid, unsigned int, len,
 	return ret;
 }
 
+static DEFINE_PER_CPU(unsigned long, last_yield);
+
 static void do_sched_yield(void)
 {
 	struct rq_flags rf;
 	struct rq *rq;
+	int cpu = raw_smp_processor_id();
+
+	cond_resched();
+
+	/* rate limit yielding to something sensible */
+	if (!time_after(jiffies, per_cpu(last_yield, cpu)))
+		return;
+	
+	per_cpu(last_yield, cpu) = jiffies;
 
 	rq = this_rq_lock_irq(&rf);
 
-- 
2.41.0

