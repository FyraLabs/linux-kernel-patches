From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 6 Sep 2023 13:28:20 +0200
Subject: [PATCH 040/297] amd-pref-core: Update to v5

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
Signed-off-by: Paskal Sitepu <rmnscnce@ya.ru>
---
 .../admin-guide/kernel-parameters.txt         |  2 +-
 Documentation/admin-guide/pm/amd-pstate.rst   | 42 +++++++++------
 drivers/cpufreq/amd-pstate.c                  | 51 +++++++++++--------
 include/linux/amd-pstate.h                    | 12 ++++-
 include/linux/cpufreq.h                       |  1 +
 5 files changed, 71 insertions(+), 37 deletions(-)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 4f78067bb8af..f23ec4dc6c4b 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -366,7 +366,7 @@
 	amd_prefcore=
 			[X86]
 			disable
-			  Disable AMD Pstate Preferred Core.
+			  Disable amd-pstate preferred core.
 
 	amijoy.map=	[HW,JOY] Amiga joystick support
 			Map of devices attached to JOY0DAT and JOY1DAT
diff --git a/Documentation/admin-guide/pm/amd-pstate.rst b/Documentation/admin-guide/pm/amd-pstate.rst
index 400264d52007..204f5d49d47d 100644
--- a/Documentation/admin-guide/pm/amd-pstate.rst
+++ b/Documentation/admin-guide/pm/amd-pstate.rst
@@ -300,7 +300,7 @@ platforms. The AMD P-States mechanism is the more performance and energy
 efficiency frequency management method on AMD processors.
 
 
-AMD Pstate Driver Operation Modes
+``amd-pstate`` Driver Operation Modes
 =================================
 
 ``amd_pstate`` CPPC has 3 operation modes: autonomous (active) mode,
@@ -353,7 +353,7 @@ is activated.  In this mode, driver requests minimum and maximum performance
 level and the platform autonomously selects a performance level in this range
 and appropriate to the current workload.
 
-AMD Pstate Preferred Core
+``amd-pstate`` Preferred Core
 =================================
 
 The core frequency is subjected to the process variation in semiconductors.
@@ -364,34 +364,34 @@ maximum frequency. To find the best process scheduling policy for a given
 scenario, OS needs to know the core ordering informed by the platform through
 highest performance capability register of the CPPC interface.
 
-``AMD Pstate Preferred Core`` enables the scheduler to prefer scheduling on
+``amd-pstate`` preferred core enables the scheduler to prefer scheduling on
 cores that can achieve a higher frequency with lower voltage. The preferred
 core rankings can dynamically change based on the workload, platform conditions,
 thermals and ageing.
 
-The priority metric will be initialized by the AMD Pstate driver. The AMD Pstate
-driver will also determine whether or not ``AMD Pstate Preferred Core`` is
+The priority metric will be initialized by the ``amd-pstate`` driver. The ``amd-pstate``
+driver will also determine whether or not ``amd-pstate`` preferred core is
 supported by the platform.
 
-AMD Pstate driver will provide an initial core ordering when the system boots.
+``amd-pstate`` driver will provide an initial core ordering when the system boots.
 The platform uses the CPPC interfaces to communicate the core ranking to the
 operating system and scheduler to make sure that OS is choosing the cores
-with highest performance firstly for scheduling the process. When AMD Pstate
+with highest performance firstly for scheduling the process. When ``amd-pstate``
 driver receives a message with the highest performance change, it will
 update the core ranking and set the cpu's priority.
 
-AMD Preferred Core Switch
+``amd-pstate`` Preferred Core Switch
 =================================
 Kernel Parameters
 -----------------
 
-``AMD Pstate Preferred Core`` has two states: enable and disable.
+``amd-pstate`` peferred core`` has two states: enable and disable.
 Enable/disable states can be chosen by different kernel parameters.
-Default enable ``AMD Pstate Preferred Core``.
+Default enable ``amd-pstate`` preferred core.
 
 ``amd_prefcore=disable``
 
-for systems that support ``AMD Pstate Preferred Core``, the core rankings will
+for systems that support ``amd-pstate`` preferred core, the core rankings will
 always be advertised by the platform. But OS can choose to ignore that via the
 kernel parameter ``amd_prefcore=disable``.
 
@@ -427,17 +427,29 @@ control its functionality at the system level.  They are located in the
         to the operation mode represented by that string - or to be
         unregistered in the "disable" case.
 
+``hw_prefcore``
+	Preferred core state of hardware: "supported" or "unsupported".
+
+	"supported"
+		The processor and power firmware support preferred core.
+
+	"unsupported"
+		The processor and power firmware don't support preferred core.
+
+
+        This attribute is read-only to check the state of hardware preferred core.
+
 ``prefcore``
-	Preferred Core state of the driver: "enabled" or "disabled".
+	Preferred core state of the driver: "enabled" or "disabled".
 
 	"enabled"
-		Enable the AMD Preferred Core.
+		Enable the ``amd-pstate`` preferred core.
 
 	"disabled"
-		Disable the AMD Preferred Core
+		Disable the ``amd-pstate`` preferred core
 
 
-        This attribute is read-only to check the state of Preferred Core.
+        This attribute is read-only to check the state of preferred core.
 
 ``cpupower`` tool support for ``amd-pstate``
 ===============================================
diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 8a8e4ecb1b5c..8c19e1d50d29 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -68,6 +68,9 @@ static struct cpufreq_driver amd_pstate_epp_driver;
 static int cppc_state = AMD_PSTATE_UNDEFINED;
 static bool cppc_enabled;
 
+/*HW preferred Core featue is supported*/
+static bool hw_prefcore = true;
+
 /*Preferred Core featue is supported*/
 static bool prefcore = true;
 
@@ -315,7 +318,7 @@ static int pstate_init_perf(struct amd_cpudata *cpudata)
 	WRITE_ONCE(cpudata->nominal_perf, AMD_CPPC_NOMINAL_PERF(cap1));
 	WRITE_ONCE(cpudata->lowest_nonlinear_perf, AMD_CPPC_LOWNONLIN_PERF(cap1));
 	WRITE_ONCE(cpudata->lowest_perf, AMD_CPPC_LOWEST_PERF(cap1));
-	WRITE_ONCE(cpudata->prefcore_highest_perf, AMD_CPPC_HIGHEST_PERF(cap1));
+	WRITE_ONCE(cpudata->cppc_highest_perf, AMD_CPPC_HIGHEST_PERF(cap1));
 
 	return 0;
 }
@@ -337,7 +340,7 @@ static int cppc_init_perf(struct amd_cpudata *cpudata)
 	WRITE_ONCE(cpudata->lowest_nonlinear_perf,
 		   cppc_perf.lowest_nonlinear_perf);
 	WRITE_ONCE(cpudata->lowest_perf, cppc_perf.lowest_perf);
-	WRITE_ONCE(cpudata->prefcore_highest_perf, cppc_perf.highest_perf);
+	WRITE_ONCE(cpudata->cppc_highest_perf, cppc_perf.highest_perf);
 
 	if (cppc_state == AMD_PSTATE_ACTIVE)
 		return 0;
@@ -544,7 +547,7 @@ static void amd_pstate_adjust_perf(unsigned int cpu,
 	if (target_perf < capacity)
 		des_perf = DIV_ROUND_UP(cap_perf * target_perf, capacity);
 
-	min_perf = READ_ONCE(cpudata->highest_perf);
+	min_perf = READ_ONCE(cpudata->lowest_perf);
 	if (_min_perf < capacity)
 		min_perf = DIV_ROUND_UP(cap_perf * _min_perf, capacity);
 
@@ -681,7 +684,7 @@ static void amd_perf_ctl_reset(unsigned int cpu)
 }
 
 /*
- * Set AMD Pstate Preferred Core enable can't be done directly from cpufreq callbacks
+ * Set amd-pstate preferred core enable can't be done directly from cpufreq callbacks
  * due to locking, so queue the work for later.
  */
 static void amd_pstste_sched_prefcore_workfn(struct work_struct *work)
@@ -690,7 +693,7 @@ static void amd_pstste_sched_prefcore_workfn(struct work_struct *work)
 }
 static DECLARE_WORK(sched_prefcore_work, amd_pstste_sched_prefcore_workfn);
 
-/**
+/*
  * Get the highest performance register value.
  * @cpu: CPU from which to get highest performance.
  * @highest_perf: Return address.
@@ -699,20 +702,20 @@ static DECLARE_WORK(sched_prefcore_work, amd_pstste_sched_prefcore_workfn);
  */
 static int amd_pstate_get_highest_perf(int cpu, u64 *highest_perf)
 {
-       int ret;
+	int ret;
 
-       if (boot_cpu_has(X86_FEATURE_CPPC)) {
-               u64 cap1;
+	if (boot_cpu_has(X86_FEATURE_CPPC)) {
+		u64 cap1;
 
-               ret = rdmsrl_safe_on_cpu(cpu, MSR_AMD_CPPC_CAP1, &cap1);
-               if (ret)
-                       return ret;
-               WRITE_ONCE(*highest_perf, AMD_CPPC_HIGHEST_PERF(cap1));
-       } else {
-               ret = cppc_get_highest_perf(cpu, highest_perf);
-       }
+		ret = rdmsrl_safe_on_cpu(cpu, MSR_AMD_CPPC_CAP1, &cap1);
+		if (ret)
+			return ret;
+		WRITE_ONCE(*highest_perf, AMD_CPPC_HIGHEST_PERF(cap1));
+	} else {
+		ret = cppc_get_highest_perf(cpu, highest_perf);
+	}
 
-       return (ret);
+	return (ret);
 }
 
 static void amd_pstate_init_prefcore(void)
@@ -732,6 +735,7 @@ static void amd_pstate_init_prefcore(void)
 
 		/* check if CPPC preferred core feature is enabled*/
 		if (highest_perf == AMD_PSTATE_MAX_CPPC_PERF) {
+			hw_prefcore = false;
 			prefcore = false;
 			return;
 		}
@@ -764,10 +768,10 @@ static void amd_pstate_update_highest_perf(unsigned int cpu)
 	policy = cpufreq_cpu_get(cpu);
 	cpudata = policy->driver_data;
 	cur_high = highest_perf;
-	prev_high = READ_ONCE(cpudata->prefcore_highest_perf);
+	prev_high = READ_ONCE(cpudata->cppc_highest_perf);
 
 	if (prev_high != cur_high) {
-		WRITE_ONCE(cpudata->prefcore_highest_perf, cur_high);
+		WRITE_ONCE(cpudata->cppc_highest_perf, cur_high);
 		sched_set_itmt_core_prio(cur_high, cpu);
 	}
 
@@ -938,7 +942,7 @@ static ssize_t show_amd_pstate_highest_perf(struct cpufreq_policy *policy,
 	u32 perf;
 	struct amd_cpudata *cpudata = policy->driver_data;
 
-	perf = READ_ONCE(cpudata->highest_perf);
+	perf = READ_ONCE(cpudata->cppc_highest_perf);
 
 	return sysfs_emit(buf, "%u\n", perf);
 }
@@ -1135,8 +1139,14 @@ static ssize_t status_store(struct device *a, struct device_attribute *b,
 	return ret < 0 ? ret : count;
 }
 
+static ssize_t hw_prefcore_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	return sysfs_emit(buf, "%s\n", hw_prefcore ? "supported" : "unsupported");
+}
+
 static ssize_t prefcore_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
+			     struct device_attribute *attr, char *buf)
 {
 	return sysfs_emit(buf, "%s\n", prefcore ? "enabled" : "disabled");
 }
@@ -1148,6 +1158,7 @@ cpufreq_freq_attr_ro(amd_pstate_highest_perf);
 cpufreq_freq_attr_rw(energy_performance_preference);
 cpufreq_freq_attr_ro(energy_performance_available_preferences);
 static DEVICE_ATTR_RW(status);
+static DEVICE_ATTR_RO(hw_prefcore);
 static DEVICE_ATTR_RO(prefcore);
 
 static struct freq_attr *amd_pstate_attr[] = {
diff --git a/include/linux/amd-pstate.h b/include/linux/amd-pstate.h
index fa86bc953d3e..2159fd5693fe 100644
--- a/include/linux/amd-pstate.h
+++ b/include/linux/amd-pstate.h
@@ -31,6 +31,11 @@ struct amd_aperf_mperf {
 	u64 mperf;
 	u64 tsc;
 };
+	/* For platforms that do not support the preferred core feature, the
+	 * highest_pef may be configured with 166 or 255, to avoid max frequency
+	 * calculated wrongly. we take the AMD_CPPC_HIGHEST_PERF(cap1) value as
+	 * the default max perf.
+	 */
 
 /**
  * struct amd_cpudata - private CPU data for AMD P-State
@@ -39,11 +44,16 @@ struct amd_aperf_mperf {
  * @cppc_req_cached: cached performance request hints
  * @highest_perf: the maximum performance an individual processor may reach,
  *		  assuming ideal conditions
+ *		  For platforms that do not support the preferred core feature, the
+ *		  highest_pef may be configured with 166 or 255, to avoid max frequency
+ *		  calculated wrongly. we take the fixed value as the highest_perf.
  * @nominal_perf: the maximum sustained performance level of the processor,
  *		  assuming ideal operating conditions
  * @lowest_nonlinear_perf: the lowest performance level at which nonlinear power
  *			   savings are achieved
  * @lowest_perf: the absolute lowest performance level of the processor
+ * @cppc_highest_perf: the maximum performance an individual processor may reach,
+ *		  assuming ideal conditions
  * @max_freq: the frequency that mapped to highest_perf
  * @min_freq: the frequency that mapped to lowest_perf
  * @nominal_freq: the frequency that mapped to nominal_perf
@@ -70,7 +80,7 @@ struct amd_cpudata {
 	u32	nominal_perf;
 	u32	lowest_nonlinear_perf;
 	u32	lowest_perf;
-	u32     prefcore_highest_perf;
+	u32     cppc_highest_perf;
 
 	u32	max_freq;
 	u32	min_freq;
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 766c83a4fae7..9ca50c4e19d3 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -260,6 +260,7 @@ static inline bool cpufreq_supports_freq_invariance(void)
 	return false;
 }
 static inline void disable_cpufreq(void) { }
+static inline void cpufreq_update_highest_perf(unsigned int cpu) { }
 #endif
 
 #ifdef CONFIG_CPU_FREQ_STAT
-- 
2.41.0

